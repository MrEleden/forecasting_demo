name: Project Structure Validation

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  validate-structure:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        
    - name: Validate project structure
      run: |
        echo "Validating ML Portfolio project structure..."
        python ci/scripts/validate_structure.py --ci
        
    - name: Check for uniform CLI patterns
      run: |
        echo "Checking CLI command consistency..."
        
        # Verify each project has the expected data script
        for project in projects/*/; do
          project_name=$(basename "$project")
          echo "Checking $project_name..."
          
          # Check for download_data.py or generate_data.py
          if [[ -f "$project/scripts/download_data.py" || -f "$project/scripts/generate_data.py" ]]; then
            echo "Data script found for $project_name"
          else
            echo "Missing data script for $project_name"
            exit 1
          fi
          
          # Check for config.yaml
          if [[ -f "$project/conf/config.yaml" ]]; then
            echo "Config file found for $project_name"
          else
            echo "Missing config.yaml for $project_name"
            exit 1
          fi
          
          # Check for README.md
          if [[ -f "$project/README.md" ]]; then
            echo "README found for $project_name"
          else
            echo "Missing README.md for $project_name"
            exit 1
          fi
        done
        
        echo "All projects have consistent structure!"

  validate-configs:
    runs-on: ubuntu-latest
    needs: validate-structure
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        
    - name: Install dependencies
      run: |
        pip install pyyaml
        
    - name: Validate Hydra configs
      run: |
        echo "Validating Hydra configuration files..."
        
        # Check that all projects have config.yaml files
        for project in projects/*/; do
          project_name=$(basename "$project")
          config_file="$project/conf/config.yaml"
          
          if [[ -f "$config_file" ]]; then
            echo "Config file found for $project_name"
          else
            echo "Missing config.yaml for $project_name"
            exit 1
          fi
        done
        
        echo "All Hydra configs present!"