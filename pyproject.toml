[tool.poetry]
name = "ml-portfolio"
version = "0.1.0"
description = "ML Portfolio - Time Series Forecasting Across Multiple Domains"
authors = ["ML Portfolio Author <author@example.com>"]
readme = "README.md"
license = "MIT"
keywords = ["machine learning", "time series", "forecasting", "arima", "lstm", "prophet"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers", 
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]

[tool.poetry.dependencies]
python = "^3.9"
# Core dependencies
pandas = ">=1.5.0"
numpy = ">=1.21.0"
scikit-learn = ">=1.0.0"
matplotlib = ">=3.5.0"
plotly = ">=5.0.0"
# Optional dependencies (made optional)
statsmodels = {version = ">=0.13.0", optional = true}
prophet = {version = ">=1.1.0", optional = true}
torch = {version = ">=1.11.0", optional = true}
gluonts = {version = ">=0.11.0", optional = true}
xgboost = {version = ">=1.6.0", optional = true}
lightgbm = {version = ">=3.3.0", optional = true}
[tool.poetry.group.dev.dependencies]
pytest = "^7.0.0"
pytest-cov = "^4.0.0"
ruff = "^0.1.0"
black = "^22.0.0"
pre-commit = "^3.0.0"
jupyter = "^1.0.0"
ipykernel = "^6.0.0"

[tool.poetry.group.train.dependencies]
optuna = "^3.4.0"
mlflow = "^2.8.0"
hydra-core = "^1.3.0"
omegaconf = "^2.3.0"
tensorboard = "^2.14.0"

[tool.poetry.group.app.dependencies]
streamlit = "^1.15.0"
fastapi = "^0.104.0"
uvicorn = "^0.24.0"
pydantic = "^2.4.0"

[tool.poetry.extras]
statistical = ["statsmodels", "prophet"]
deep_learning = ["torch", "gluonts"]
boosting = ["xgboost", "lightgbm"]
all = ["statsmodels", "prophet", "torch", "gluonts", "xgboost", "lightgbm"]

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

# Black formatter configuration
[tool.black]
line-length = 120
target-version = ["py39", "py310", "py311"]
include = '\.pyi?$'
extend-exclude = '''
/(
    # Directories to exclude
    \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
  | __pycache__
  | \.ipynb_checkpoints
)/
'''

# Ruff linter configuration
[tool.ruff]
line-length = 120
target-version = "py39"
src = ["src", "projects"]

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]  # Allow unused imports in __init__.py
"tests/**/*" = ["B011"]   # Allow assert False in tests

[tool.ruff.lint.isort]
known-first-party = ["ml_portfolio"]
split-on-trailing-comma = true

# Pytest configuration
[tool.pytest.ini_options]
minversion = "6.0"
addopts = [
    "--strict-config",
    "--strict-markers", 
    "--disable-warnings",
    "-ra",
]
testpaths = [
    "tests",
    "projects/*/tests",
]
python_files = [
    "test_*.py",
    "*_test.py",
    "tests.py",
]
python_classes = [
    "Test*",
]
python_functions = [
    "test_*",
]

# Coverage configuration
[tool.coverage.run]
source = ["src/ml_portfolio"]
omit = [
    "*/tests/*",
    "*/__pycache__/*",
    "*/.*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == \"__main__\":",
    "class .*\\\\bProtocol\\\\):",
    "@(abc\\.)?abstractmethod",
]

# MyPy configuration
[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "statsmodels.*",
    "prophet.*", 
    "plotly.*",
    "streamlit.*",
    "optuna.*",
    "mlflow.*",
    "hydra.*",
    "omegaconf.*",
]
ignore_missing_imports = true